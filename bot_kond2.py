import logging
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)
from dotenv import load_dotenv

# –°—Ç–∞–¥—ñ—ó –¥–ª—è —Ä–æ–∑–º–æ–≤–∏
NAME, PHONE, TYPE, SERVICE, ADDRESS, TIME, COMMENT, PHOTO = range(8)

# ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–π –æ—Ç—Ä–∏–º–∞—î –∑–∞—è–≤–∫—É
OWNER_ID = 7224980019  # –∑–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π Telegram ID

# –°–ø–∏—Å–æ–∫ –ø–æ—Å–ª—É–≥
services = {
    "–ü–æ–±—É—Ç–æ–≤–∏–π": [
        "–ê–Ω—Ç–∏–±–∞–∫—Ç–µ—Ä—ñ–∞–ª—å–Ω–∞ —á–∏—Å—Ç–∫–∞",
        "–†–µ–º–æ–Ω—Ç",
        "–ó–∞–ø—Ä–∞–≤–∫–∞",
        "–ú–æ–Ω—Ç–∞–∂/–¥–µ–º–æ–Ω—Ç–∞–∂",
        "–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
        "–Ü–Ω—à–µ"
    ],
    "–ê–≤—Ç–æ": [
        "–ü–æ—à—É–∫ –≤–∏—Ç–æ–∫—ñ–≤",
        "–†–µ–º–æ–Ω—Ç",
        "–ü–µ—Ä–µ–¥—Å–µ–∑–æ–Ω–Ω–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è",
        "–ó–∞–ø—Ä–∞–≤–∫–∞ –∑ —É/—Ñ –±–∞—Ä–≤–Ω–∏–∫–æ–º",
        "–Ü–Ω—à–µ"
    ]
}

# –°—Ç–∞—Ä—Ç
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): 
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! üëã –Ø ‚Äî –î–º–∏—Ç—Ä–æ, –≤–∞—à –Ω–∞–¥—ñ–π–Ω–∏–π –º–∞–π—Å—Ç–µ—Ä –∑ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤ –≤ –û–¥–µ—Å—ñ.\n"
        "–î–æ–ø–æ–º–æ–∂—É —à–≤–∏–¥–∫–æ, —è–∫—ñ—Å–Ω–æ —Ç–∞ –∑ –≥–∞—Ä–∞–Ω—Ç—ñ—î—é. –ù–∞–ø–∏—à—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –í–∞—à–µ —ñ–º'—è:"
    )
    return NAME

# –Ü–º‚Äô—è
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text
    context.user_data["name"] = name

    keyboard = [["–ü–æ–±—É—Ç–æ–≤–∏–π", "–ê–≤—Ç–æ"]]

    await update.message.reply_text(
        f"–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å, {name}! üëã\n\n"
        "–ó —è–∫–∏–º —Ç–∏–ø–æ–º –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä–∞ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ—Ç—Ä–µ–±–∞? üëá\n"
        "–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return TYPE

# –¢–∏–ø –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä–∞
async def get_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    type_selected = update.message.text.strip().capitalize()
    if type_selected not in services:
        await update.message.reply_text("‚ö†Ô∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return TYPE

    context.user_data["type"] = type_selected
    buttons = [[s] for s in services[type_selected]]
    await update.message.reply_text(
        "üîß –î—è–∫—É—é!\n–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—Å–ª—É–≥—É, —è–∫–∞ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
    )
    return SERVICE

# –ü–æ—Å–ª—É–≥–∞
async def get_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["service"] = update.message.text
    await update.message.reply_text(
        "üìû –¢–µ–ø–µ—Ä, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ª–∏—à—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤‚Äô—è–∑–∫—É.\n"
        "–Ø –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É—é –∞–±–æ –Ω–∞–ø–∏—à—É –í–∞–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π.")
    return PHONE

# –¢–µ–ª–µ—Ñ–æ–Ω
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["phone"] = update.message.text
    await update.message.reply_text("üìç –ó–∞–ª–∏—à—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –∞–¥—Ä–µ—Å—É –∞–±–æ –Ω–∞–∑–≤—É —Ä–∞–π–æ–Ω—É, –¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ —Ä–æ–±–æ—Ç—É.")
    return ADDRESS

# –ê–¥—Ä–µ—Å–∞
async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    await update.message.reply_text("üïí –ö–æ–ª–∏ –í–∞–º –∑—Ä—É—á–Ω–æ, —â–æ–± —è –ø—Ä–∏—ó—Ö–∞–≤? –í–∫–∞–∂—ñ—Ç—å –¥–µ–Ω—å —ñ –±–∞–∂–∞–Ω–∏–π —á–∞—Å.")
    return TIME

# –ß–∞—Å
async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time"] = update.message.text

    skip_keyboard = [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]]
    await update.message.reply_text(
        "üí¨ –Ø–∫—â–æ —î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–±–∞–∂–∞–Ω–Ω—è —á–∏ –¥–µ—Ç–∞–ª—ñ ‚Äî –Ω–∞–ø–∏—à—ñ—Ç—å —ó—Ö —Ç—É—Ç.\n"
        "–Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.",
        reply_markup=ReplyKeyboardMarkup(skip_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return COMMENT

# –ö–æ–º–µ–Ω—Ç–∞—Ä
async def get_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    if text == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        context.user_data["comment"] = "-"
    else:
        context.user_data["comment"] = update.message.text

    skip_keyboard = [["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏"]]
    await update.message.reply_text(
        "üì∏ –ó–∞ –±–∞–∂–∞–Ω–Ω—è–º, –º–æ–∂–µ—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º–∏ –∞–±–æ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä–∞. –¶–µ –¥–æ–ø–æ–º–æ–∂–µ –º–µ–Ω—ñ –∫—Ä–∞—â–µ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏—Å—è.\n\n"
        "–Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.",
        reply_markup=ReplyKeyboardMarkup(skip_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return PHOTO

# –§–æ—Ç–æ –∞–±–æ –ø—Ä–æ–ø—É—Å–∫
async def get_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message and update.message.photo:
        context.user_data["photo"] = update.message.photo[-1].file_id
    elif update.message and update.message.text and update.message.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        context.user_data["photo"] = None
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏¬ª.")
        return PHOTO

    text = (
        f"üîß –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n"
        f"üë§ –Ü–º‚Äô—è: {context.user_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"‚ùÑÔ∏è –¢–∏–ø: {context.user_data['type']}\n"
        f"üîß –ü–æ—Å–ª—É–≥–∞: {context.user_data['service']}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {context.user_data['address']}\n"
        f"üïê –ß–∞—Å: {context.user_data['time']}\n"
        f"üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä: {context.user_data['comment']}"
    )

    await context.bot.send_message(chat_id=OWNER_ID, text=text)

    if context.user_data["photo"]:
        await context.bot.send_photo(chat_id=OWNER_ID, photo=context.user_data["photo"])

    await update.message.reply_text(
        "‚úÖ –î—è–∫—É—é! –ó–∞—è–≤–∫—É –æ—Ç—Ä–∏–º–∞–Ω–æ.\n"
        "–Ø –∑–≤'—è–∂—É—Å—å —ñ–∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ç–∞ –¥–æ–º–æ–≤–∏—Ç–∏—Å—å –ø—Ä–æ –∑—Ä—É—á–Ω–∏–π —á–∞—Å.\n\n"
        "–•–æ—Ä–æ—à–æ–≥–æ –¥–Ω—è! üòä",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END

# –°–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error(f"‚ùå Exception: {context.error}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    load_dotenv()
    token = os.getenv("TELEGRAM_BOT_TOKEN")

    if not token:
        print("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ")
        return

    app = ApplicationBuilder().token(token).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_type)],
            SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_service)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_comment)],
            PHOTO: [MessageHandler(filters.PHOTO | (filters.TEXT & ~filters.COMMAND), get_photo)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv)
    app.add_error_handler(error_handler)
    app.run_polling()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()